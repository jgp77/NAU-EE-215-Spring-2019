;-------------------------------------------------------------------------------
; MSP430 Assembler Code Template for use with TI Code Composer Studio
;
;
;-------------------------------------------------------------------------------
            .cdecls C,LIST,"msp430.h"       ; Include device header file

;-------------------------------------------------------------------------------
            .def    RESET                   ; Export program entry-point to
                                            ; make it known to linker.
;-------------------------------------------------------------------------------
            .text                           ; Assemble into program memory.
            .retain                         ; Override ELF conditional linking
                                            ; and retain current section.
            .retainrefs                     ; And retain any sections that have
                                            ; references to current section.

;-------------------------------------------------------------------------------
RESET       mov.w   #__STACK_END,SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop watchdog timer


;-------------------------------------------------------------------------------
; Main loop here
;-------------------------------------------------------------------------------
		.data
list: 	.byte 20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1

		.text
;R9 is leftElement, R10 is rightelement, R5 is index/counter, R8 is tmpElement, R6 boolean swapped,R7 is not in use
		clr.b R5
		mov.b #1,R4
		jmp firstRun

BubbleSort:
		cmp.w #0,R6 			; If not swapped Exit
		jz exit
		clr.b R6 			; Else clear out swapped and repeat
		clr.b R5
		mov.b #2,R4

firstRun:
		mov.b list(R5),R9	; Move leftElement into R9
		mov.b list(R4),R10	; Move rightElement into R10
		cmp.b R10,R9		; Compare the left and right elements
		jn skipSwap 		; if Left <= Right, Skip the swap				PROBLEM
		jeq skipSwap
		call #Swap	  		; Else Right < left, Swap

skipSwap:
		inc R5			   	; Increment the leftElement pointer by 2
		inc R4				; Increment the rightElement pointer by 2
		mov.b R5,R15
		add.w #0x1c00,R15
		cmp #0x1c13,R5			; If it has hit the end of the list           MAYBE CHANGE TO MEMORY ADDRESS OF LAST POSITION INSTEAD
		jz BubbleSort		; jump to BubbleSort
		jmp firstRun		; else repeat sort

exit:
		jmp $

Swap:
		mov.b R9,list(R4)	; Put the leftElement into the right element location
		mov.b R10,list(R5)	; Put the rightElement into the right element location
		mov.w #1,R6			; Swapped = true
		ret					; Return to caller

;-------------------------------------------------------------------------------
; Stack Pointer definition
;-------------------------------------------------------------------------------
            .global __STACK_END
            .sect   .stack

;-------------------------------------------------------------------------------
; Interrupt Vectors
;-------------------------------------------------------------------------------
            .sect   ".reset"                ; MSP430 RESET Vector
            .short  RESET
